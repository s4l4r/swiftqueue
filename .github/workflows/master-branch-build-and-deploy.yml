name: Build & Deploy Master Branch

# Run this workflow every time a new commit pushed to the repository
on:
  push:
    branches:
      - master
  pull_request:
    types:
      - opened
      - synchronize
jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Compile
        run: mvn compile
      - name: Cache Maven Packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
        continue-on-error: true
      - name: Test
        run: mvn test
      - name: Package
        run: mvn package
      - name: Get Version
        run: echo '::set-output name=version::$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)'
        id: set-version
      - name: Prepare Artifact
        if: github.ref == 'refs/heads/master'
        run: mkdir -p staging/target && cp -r target/* staging/target
      - name: Upload Artifact
        if: github.ref == 'refs/heads/master'
        uses: actions/upload-artifact@v2
#        if: github.ref == 'refs/heads/master'
        with:
          name: app-artifact
          path: staging
  Docker:
    runs-on: ubuntu-latest
    needs: Build
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: app-artifact
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and Push with RevisionId tag
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: swiftqueuetest/swiftqueue:${{ steps.set-version.outputs.version }},swiftqueuetest/swiftqueue:latest
          context: target/
          file: target/Dockerfile
  Deploy:
    runs-on: ubuntu-latest
    needs: Docker
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Deploy to Production
        uses: WyriHaximus/github-action-helm3@v2
        with:
          exec: helm upgrade swiftqueue ./helm/swiftqueue --set-string image.tag=${{ steps.set-version.outputs.version }}
          kubeconfig: ${{ secrets.KUBE_CONFIG_DATA }}
  UpdateVersion:
    runs-on: ubuntu-latest
    needs: Deploy
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Update POM Version
        run: mvn versions:set -DnewVersion=$(echo ${{ steps.set-version.outputs.version }} | awk -F. -v OFS=. '{$NF++;print}')
      - name: Commit files
        run: |
          git config --local user.email "github@users.noreply.github.com"
          git config --local user.name "Github CI/CD"
          git commit -m "Updated POM file for the next version" -a
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}


